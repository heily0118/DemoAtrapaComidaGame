/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package autonoma.demoatrapacomida.gui;

import autonoma.demoatrapacomida.elements.Comida;
import autonoma.demoatrapacomida.elements.GraphicContainer;
import autonoma.demoatrapacomida.elements.Jugador;

import autonoma.demoatrapacomida.elements.VideoJuego;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.Buffer;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author Mateo Quintero <mateo.quinterom@autonoma.edu.co>
 * @version 1.0.0
 * @since 20250501
 * @see autonoma.emoatrapacomida..elements
 */
public class VentanaJuego extends JFrame implements GraphicContainer {

    /**
     * Creates new form VentanaJuego
     */
    
    private VideoJuego juego;
    private Image buffer;
    private Image fondoCampo;
    private Image fondoCampo;
    private BufferedImage buffer; 

    public VentanaJuego(java.awt.Frame parent, boolean modal,VideoJuego juego) {

        initComponents();
        this.juego = juego;
        setTitle("Atrapa Comida");
        setSize(800, 800);
        setLocationRelativeTo(null);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        this.setSize(800,800);
         setResizable(false);
        this.setLocationRelativeTo(null);
        this.juego.generarComida();
        
        
        try{ 
            this.setIconImage(new ImageIcon(getClass().getResource("/autonoma/DemoAtrapaComida/images/Logo.jpeg")).getImage());
            fondoCampo = new ImageIcon(getClass().getResource("/autonoma/DemoAtrapaComida/images/fondoCampo.jpeg")).getImage();
        }catch(NullPointerException e){
            System.out.println("Imagen no encontrada");
            
        }

       
        // Timer para hacer caer las comidas y repintar
        javax.swing.Timer timer = new javax.swing.Timer(30, e -> {
            for (Comida c : juego.getCampo().getComidas()) {
                c.caer();  
            }
            repaint();
        });
        timer.start();

        // Timer para agregar nuevas comidas periódicamente
        javax.swing.Timer generadorComida = new javax.swing.Timer(3000, e -> {
            juego.generarComida();
        });
        generadorComida.start();
    


        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    // Verifica si el botón izquierdo del mouse fue presionado
    if (evt.getButton() == MouseEvent.BUTTON1) {
        // Aquí va el código que deseas ejecutar al hacer clic izquierdo
        System.out.println("Clic izquierdo detectado!");
        
       juego.getCampo().getJugador().atraparComida(juego.getCampo().getComidas());
       juego.getCampo().getJugador().atraparVeneno(juego.getCampo().getVenenos());
                

       
    }
      

    
    }//GEN-LAST:event_formMouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
        
        if(evt.getKeyCode() == KeyEvent.VK_Q)
        {
            System.exit(0);
        }
        
        if(evt.getKeyCode() == KeyEvent.VK_UP |
           evt.getKeyCode() == KeyEvent.VK_DOWN |
           evt.getKeyCode() == KeyEvent.VK_LEFT |
           evt.getKeyCode() == KeyEvent.VK_RIGHT)
        {
                  
            try {
                juego.manejarEventoTeclado(evt.getKeyCode());
            } catch (IOException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        repaint();
    }//GEN-LAST:event_formKeyPressed

    @Override
    public void paint(Graphics g) {

        super.paint(g);
        dibujar(g); 
        juego.dibujarElementos(g); 
       
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", Font.BOLD, 24));
        g.drawString("PUNTAJE", 25, 80);
        g.drawString(String.valueOf(juego.getCampo().getJugador().getPuntaje().getPuntajeActual()), 150, 80);

       juego.getCampo().getJugador().paint(g);




        juego.getCampo().getJugador().paint(g);

    }

    public void dibujar(Graphics g) {

        if (fondoCampo != null) {
            g.drawImage(fondoCampo, 0, 0, getWidth(), getHeight(), this);
        } else {
            // Si no se carga la imagen, dibuja fondo verde como fallback
            g.setColor(new Color(34, 139, 34));
            g.fillRect(0, 0, 800, 800);

        if (buffer == null || buffer.getWidth() != getWidth() || buffer.getHeight() != getHeight()) {
            buffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);

        }

        Graphics gBuffer = buffer.getGraphics();

        // Dibuja el fondo
        if (fondoCampo != null) {
            gBuffer.drawImage(fondoCampo, 0, 0, getWidth(), getHeight(), this);
        } else {
            gBuffer.setColor(new Color(34, 139, 34)); 
            gBuffer.fillRect(0, 0, getWidth(), getHeight());
        }

        // Dibuja los elementos
        juego.dibujarElementos(gBuffer);

        // Dibuja el puntaje
        
        gBuffer.setColor(Color.BLACK);
        gBuffer.setFont(new Font("Arial", Font.BOLD, 24));
        gBuffer.drawString("PUNTAJE", 25, 80);
        gBuffer.drawString(String.valueOf(juego.getCampo().getJugador().getPuntaje().getPuntajeActual()), 150, 80);

        // Dibujar jugador
        juego.getCampo().getJugador().paint(gBuffer);

        g.drawImage(buffer, 0, 0, this);
    
        gBuffer.dispose();
    }
    }
    
    @Override
    public void refresh(Graphics g) {
        
        juego.dibujarElementos(g); 
        this.repaint();

    }

    @Override
    public Rectangle getBoundaries() {
        return this.getBounds();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
